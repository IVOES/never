
func randomize(seed -> int) -> () -> int
{
    let v = seed;
    func rand() -> int
    {
        v = v * 5381 % 1000
    }
    rand
}

func sigmoid(x -> float) -> float
{
    1.0 / (1.0 + exp(-x))
}

func one_matrix(W[D1, D2] -> float) -> int
{
    let w = 0;
    let c = 0;
    
    for (w = 0; w < D1; w = w + 1)
    {
        for (c = 0; c < D2; c = c + 1)
        {
            W[w, c] = 1.0
        }
    }
}

func rand_matrix(W[D1, D2] -> float, rand() -> int) -> int
{
    let w = 0;
    let c = 0;
    
    for (w = 0; w < D1; w = w + 1)
    {
        for (c = 0; c < D2; c = c + 1)
        {
            W[w, c] = rand() / 1000.0
        }
    }
}

func sigmoid_matrix(W[D1, D2] -> float) -> [_,_] -> float
{
    let w = 0;
    let c = 0;
    let S = {[ D1, D2 ]} -> float;
    
    for (w = 0; w < D1; w = w + 1)
    {
        for (c = 0; c < D2; c = c + 1)
        {
            S[w, c] = sigmoid(W[w, c])
        }
    };
    S
}

func T_matrix(W[D1, D2] -> float) -> [_,_] -> float
{
    let w = 0;
    let c = 0;
    let T = {[ D2, D1 ]} -> float;
    
    for (w = 0; w < D1; w = w + 1)
    {
        for (c = 0; c < D2; c = c + 1)
        {
            T[c, w] = W[w, c]
        }
    };
    T
}

func Hadamard_matrix(W1[D1, D2] -> float, W2[D3, D4] -> float) -> [_,_] -> float
{
    let w = 0;
    let c = 0;
    let H = {[ D1, D2 ]} -> float;
    
    for (w = 0; w < D1; w = w + 1)
    {
        for (c = 0; c < D2; c = c + 1)
        {
            H[w, c] = W1[w, c] * W2[w, c]
        }
    };
    H
}

func print_matrix(W[D1, D2] -> float) -> int
{
    let w = 0;
    let c = 0;
    
    for (w = 0; w < D1; w = w + 1)
    {
        for (c = 0; c < D2; c = c + 1)
        {
            prints(W[w, c] + " ")
        };
        prints("\n")
    }
}

func nn() -> int
{
    let x = [ [1, 0, 1],
              [0, 1, 0],
              [1, 1, 1],
              [1, 0, 0] ] -> float;
    let xT = T_matrix(x);
    let y = [ [1, 0, 1, 0] ] -> float;
    let yT = T_matrix(y);
    let W = {[ 3, 1 ]} -> float;
    let z = {[ 4, 1 ]} -> float;
    let s = {[ 4, 1 ]} -> float;
    let sD = {[ 4, 1 ]} -> float;
    let err = {[ 4, 1 ]} -> float;
    let one = {[ 4, 1 ]} -> float;
    let rand = randomize(165);
    let i = 0;

    one_matrix(one);
    rand_matrix(W, rand);

    for (i = 0; i < 1000; i = i + 1)
    {
        z = x * W;
        s = sigmoid_matrix(z);

        err = yT - s;
        sD = Hadamard_matrix(s, one - s);
        W = W + xT * Hadamard_matrix(err, sD)
    };
    
    z = ([[ 1, 1, 1 ]] -> float) * W;
    s = sigmoid_matrix(z);
    
    print_matrix(s);
    
    0   
}

func main() -> int
{
    nn();
    0
}

