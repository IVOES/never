/**
 * functional programming language
 * syntactically scoped
 * first class functions
 * call by value
 */
func min(float a, float b, float c) -> float
{
    return a < b ? a * c : b * c;
}

func minCoeff(float p1, float p2, float coeff) -> float
{
    func min(float n_a, float n_b) -> float
    {
        return coeff * (n_a < n_b ? n_a : n_b);
    }

    return min(p2, p1);
}

func crazy(float a, float, () -> float, funcZ(float, float) -> (float) -> () -> float) -> float
{
    return 0;
}

func prfloat(void_func(float, float, float) -> float) -> float
{
    return println(void_func(10, 20, 30));
}

func my_func(float a, float b, float c) -> float
{
    return 2 * minCoeff(a, b, c);
}

func void_func() -> float
{
    return 0 < 0 ? 0 : 10;
}

func main() -> float
{
    return assert(prfloat(my_func) == 600);
}

